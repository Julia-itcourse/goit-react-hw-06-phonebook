{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsActions from './contactsActions';\n\nconst handleAdd = state => {\n  return [...state, payload.newContact];\n};\n\nconst handleRemove = () => {};\n\nconst itemsTestReducer = createReducer([], {\n  [contactsActions.onAddContact]: handleAdd,\n  [contactsActions.onRemoveContact]: handleRemove\n});\n\nconst items = (state = [], {\n  type,\n  payload\n}) => {\n  console.log(\"contactsReducer.items\");\n\n  switch (type) {\n    case contactsActions.onAddContact.type:\n      console.log(payload.newContact);\n      return [...state, payload.newContact];\n\n    case contactsActions.onRemoveContact.type:\n      return state.filter(contact => contact.id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = \"\", {\n  type,\n  payload\n}) => {\n  console.log(\"contactsReducer.filter\");\n\n  switch (type) {\n    case contactsActions.onChangeFilter.type:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter\n}); //*______________________BEFORE CREATE REDUCER__________________\n// import { combineReducers } from \"redux\"\n// import contactsActions from './contactsActions'\n// const items = (state = [], { type, payload }) => {\n//   console.log(\"contactsReducer.items\")\n//   switch (type) {\n//     case contactsActions.onAddContact.type:\n//       console.log(payload.newContact)\n//       return [...state, payload.newContact]\n//     case contactsActions.onRemoveContact.type:\n//       return state.filter((contact) => contact.id !== payload)\n//     default:\n//       return state\n//   }\n// }\n// const filter = (state = \"\", { type, payload }) => {\n//   console.log(\"contactsReducer.filter\")\n//   switch (type) {\n//     case contactsActions.onChangeFilter.type:\n//       return payload\n//     default:\n//       return state\n//   }\n// }\n// export default combineReducers({\n//   items,\n//   filter,\n// })\n// *______________________BEFORE TOOLKIT__________________________\n// import { combineReducers } from \"redux\"\n// import actionTypes from \"./contactsActionTypes\"\n// const items = (state = [], { type, payload }) => {\n//   console.log(\"contactsReducer.items\")\n//   switch (type) {\n//     case actionTypes.ADD:\n//       console.log(payload.newContact)\n//       return [...state, payload.newContact]\n//     case actionTypes.REMOVE:\n//       return state.filter((contact) => contact.id !== payload.contactId)\n//     default:\n//       return state\n//   }\n// }\n// const filter = (state = \"\", { type, payload }) => {\n//   console.log(\"contactsReducer.filter\")\n//   switch (type) {\n//     case actionTypes.CHANGE_FILTER:\n//       return payload.filter\n//     default:\n//       return state\n//   }\n// }\n// export default combineReducers({\n//   items,\n//   filter,\n// })","map":{"version":3,"sources":["D:/dev/GitHub/goit-react-hw-06-phonebook/src/redux/contacts/contactsReducer.js"],"names":["combineReducers","createReducer","contactsActions","handleAdd","state","payload","newContact","handleRemove","itemsTestReducer","onAddContact","onRemoveContact","items","type","console","log","filter","contact","id","onChangeFilter"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAU;AACxB,SAAO,CAAC,GAAGA,KAAJ,EAAWC,OAAO,CAACC,UAAnB,CAAP;AAEH,CAHD;;AAKA,MAAMC,YAAY,GAAG,MAAK,CAEzB,CAFD;;AAIA,MAAMC,gBAAgB,GAAGP,aAAa,CAAC,EAAD,EAAK;AACvC,GAACC,eAAe,CAACO,YAAjB,GAAgCN,SADO;AAEvC,GAACD,eAAe,CAACQ,eAAjB,GAAmCH;AAFI,CAAL,CAAtC;;AAKA,MAAMI,KAAK,GAAG,CAACP,KAAK,GAAG,EAAT,EAAa;AAAEQ,EAAAA,IAAF;AAAQP,EAAAA;AAAR,CAAb,KAAmC;AAC/CQ,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,UAAQF,IAAR;AACE,SAAKV,eAAe,CAACO,YAAhB,CAA6BG,IAAlC;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYT,OAAO,CAACC,UAApB;AACA,aAAO,CAAC,GAAGF,KAAJ,EAAWC,OAAO,CAACC,UAAnB,CAAP;;AAEF,SAAKJ,eAAe,CAACQ,eAAhB,CAAgCE,IAArC;AACE,aAAOR,KAAK,CAACW,MAAN,CAAcC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeZ,OAAzC,CAAP;;AAEF;AACE,aAAOD,KAAP;AATJ;AAWD,CAbD;;AAeA,MAAMW,MAAM,GAAG,CAACX,KAAK,GAAG,EAAT,EAAa;AAAEQ,EAAAA,IAAF;AAAQP,EAAAA;AAAR,CAAb,KAAmC;AAChDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,UAAQF,IAAR;AACE,SAAKV,eAAe,CAACgB,cAAhB,CAA+BN,IAApC;AACE,aAAOP,OAAP;;AAEF;AACE,aAAOD,KAAP;AALJ;AAOD,CATD;;AAWA,eAAeJ,eAAe,CAAC;AAC7BW,EAAAA,KAD6B;AAE7BI,EAAAA;AAF6B,CAAD,CAA9B,C,CAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from \"redux\"\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport contactsActions from './contactsActions'\r\n\r\nconst handleAdd = (state) =>{\r\n    return [...state, payload.newContact]\r\n\r\n}\r\n\r\nconst handleRemove = () =>{\r\n    \r\n}\r\n\r\nconst itemsTestReducer = createReducer([], {\r\n    [contactsActions.onAddContact]: handleAdd,\r\n    [contactsActions.onRemoveContact]: handleRemove,\r\n})\r\n\r\nconst items = (state = [], { type, payload }) => {\r\n  console.log(\"contactsReducer.items\")\r\n  switch (type) {\r\n    case contactsActions.onAddContact.type:\r\n      console.log(payload.newContact)\r\n      return [...state, payload.newContact]\r\n\r\n    case contactsActions.onRemoveContact.type:\r\n      return state.filter((contact) => contact.id !== payload)\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst filter = (state = \"\", { type, payload }) => {\r\n  console.log(\"contactsReducer.filter\")\r\n  switch (type) {\r\n    case contactsActions.onChangeFilter.type:\r\n      return payload\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n})\r\n\r\n//*______________________BEFORE CREATE REDUCER__________________\r\n// import { combineReducers } from \"redux\"\r\n// import contactsActions from './contactsActions'\r\n\r\n\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   console.log(\"contactsReducer.items\")\r\n//   switch (type) {\r\n//     case contactsActions.onAddContact.type:\r\n//       console.log(payload.newContact)\r\n//       return [...state, payload.newContact]\r\n\r\n//     case contactsActions.onRemoveContact.type:\r\n//       return state.filter((contact) => contact.id !== payload)\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   console.log(\"contactsReducer.filter\")\r\n//   switch (type) {\r\n//     case contactsActions.onChangeFilter.type:\r\n//       return payload\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// })\r\n\r\n// *______________________BEFORE TOOLKIT__________________________\r\n\r\n// import { combineReducers } from \"redux\"\r\n// import actionTypes from \"./contactsActionTypes\"\r\n\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   console.log(\"contactsReducer.items\")\r\n//   switch (type) {\r\n//     case actionTypes.ADD:\r\n//       console.log(payload.newContact)\r\n//       return [...state, payload.newContact]\r\n\r\n//     case actionTypes.REMOVE:\r\n//       return state.filter((contact) => contact.id !== payload.contactId)\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   console.log(\"contactsReducer.filter\")\r\n//   switch (type) {\r\n//     case actionTypes.CHANGE_FILTER:\r\n//       return payload.filter\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// })\r\n"]},"metadata":{},"sourceType":"module"}