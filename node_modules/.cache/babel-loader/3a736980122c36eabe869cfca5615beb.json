{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\dev\\\\GitHub\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React, { Component } from \"react\";\nimport ContactList from \"../ContactList\";\nimport PhonebookForm from \"../PhonebookForm\";\nimport Filter from \"../Filter\";\nimport Logo from \"../Logo\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAddContact = newContact => {\n      const sameContact = this.state.contacts.find(contact => contact.name === newContact.name);\n\n      if (sameContact) {\n        this.setState({\n          showNotification: true\n        });\n        setTimeout(() => this.setState({\n          showNotification: false\n        }), 1500);\n      } else {\n        this.setState(prevState => {\n          return {\n            contacts: [...prevState.contacts, newContact]\n          };\n        });\n      }\n    };\n\n    this.onRemoveContact = contactId => {\n      this.setState(prevState => {\n        return {\n          contacts: prevState.contacts.filter(({\n            id\n          }) => id !== contactId)\n        };\n      });\n    };\n\n    this.onChangeFilter = filter => {\n      this.setState({\n        filter\n      });\n    };\n  }\n\n  // state = {\n  //   contacts: [],\n  //   filter: \"\",\n  //   name: \"\",\n  //   number: \"\",\n  //   showNotification: false\n  // }\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\");\n\n    if (persistedContacts) {\n      this.setState({\n        contacts: JSON.parse(persistedContacts)\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    // const filteredContacts = this.state.contacts.filter((contact) =>\n    //   contact.name.toLowerCase().includes(this.state.filter)\n    // )\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CSSTransition, {\n        in: true,\n        appear: true,\n        timeout: 500,\n        classNames: \"Logo-slideIn\",\n        children: /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PhonebookForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContactList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    items: state.contacts.items\n  };\n};\n\nexport default connect(mapStateToProps)(App); //*_______________BEFORE_REDUX___________________\n// import React, { Component } from \"react\"\n// import ContactList from \"../ContactList\"\n// import PhonebookForm from \"../PhonebookForm\"\n// import Filter from \"../Filter\"\n// import Logo from \"../Logo\"\n// import { CSSTransition } from \"react-transition-group\"\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     number: \"\",\n//     showNotification: false\n//   }\n//   componentDidMount() {\n//     const persistedContacts = localStorage.getItem(\"contacts\")\n//     if (persistedContacts) {\n//       this.setState({\n//         contacts: JSON.parse(persistedContacts),\n//       })\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\n//     }\n//   }\n//   onAddContact = (newContact) => {\n//     const sameContact = this.state.contacts.find(\n//       (contact) => contact.name === newContact.name\n//     )\n//     if (sameContact) {\n//       this.setState({ showNotification: true });\n//       setTimeout(() => this.setState({ showNotification: false }), 1500);\n//     } else {\n//       this.setState((prevState) => {\n//         return {\n//           contacts: [...prevState.contacts, newContact],\n//         }\n//       })\n//     }\n//   }\n//   onRemoveContact = (contactId) => {\n//     this.setState((prevState) => {\n//       return {\n//         contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n//       }\n//     })\n//   }\n//   onChangeFilter = (filter) => {\n//     this.setState({ filter })\n//   }\n//   render() {\n//     const filteredContacts = this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter)\n//     )\n//     return (\n//       <>\n//       <CSSTransition in={true} appear = {true} timeout = {500} classNames = \"Logo-slideIn\">\n//         <Logo />\n//         </CSSTransition>\n//         <PhonebookForm onAddContact={this.onAddContact}   notification={this.state.showNotification} />\n//         <CSSTransition\n//             in={this.state.contacts.length > 1}\n//             timeout={500}\n//             classNames={\"filter\"}\n//             unmountOnExit\n//           >\n//           <Filter\n//             value={this.state.filter}\n//             onChangeFilter={this.onChangeFilter}\n//           />\n//           </CSSTransition>\n//           <ContactList\n//             contacts={filteredContacts}\n//             onRemoveContact={this.onRemoveContact}\n//           />\n//       </>\n//     )\n//   }\n// }\n// export default App","map":{"version":3,"sources":["D:/dev/GitHub/goit-react-hw-06-phonebook/src/components/App/App.jsx"],"names":["React","Component","ContactList","PhonebookForm","Filter","Logo","CSSTransition","connect","App","onAddContact","newContact","sameContact","state","contacts","find","contact","name","setState","showNotification","setTimeout","prevState","onRemoveContact","contactId","filter","id","onChangeFilter","componentDidMount","persistedContacts","localStorage","getItem","JSON","parse","componentDidUpdate","prevProps","setItem","stringify","render","mapStateToProps","items"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport ContactList from \"../ContactList\"\nimport PhonebookForm from \"../PhonebookForm\"\nimport Filter from \"../Filter\"\nimport Logo from \"../Logo\"\nimport { CSSTransition } from \"react-transition-group\"\nimport {connect} from 'react-redux'\n\n\n\nclass App extends Component {\n  // state = {\n  //   contacts: [],\n  //   filter: \"\",\n  //   name: \"\",\n  //   number: \"\",\n  //   showNotification: false\n  // }\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\")\n\n    if (persistedContacts) {\n      this.setState({\n        contacts: JSON.parse(persistedContacts),\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\n    }\n  }\n\n  onAddContact = (newContact) => {\n    const sameContact = this.state.contacts.find(\n      (contact) => contact.name === newContact.name\n    )\n    if (sameContact) {\n      this.setState({ showNotification: true });\n      setTimeout(() => this.setState({ showNotification: false }), 1500);\n    } else {\n      this.setState((prevState) => {\n        return {\n          contacts: [...prevState.contacts, newContact],\n        }\n      })\n    }\n  }\n\n  onRemoveContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      }\n    })\n  }\n\n  onChangeFilter = (filter) => {\n    this.setState({ filter })\n  }\n\n  render() {\n    // const filteredContacts = this.state.contacts.filter((contact) =>\n    //   contact.name.toLowerCase().includes(this.state.filter)\n    // )\n    return (\n      <>\n      <CSSTransition in={true} appear = {true} timeout = {500} classNames = \"Logo-slideIn\">\n        <Logo />\n        </CSSTransition>\n\n        <PhonebookForm />\n        {/* <CSSTransition\n            in={state.contacts.length > 1}\n            timeout={500}\n            classNames={\"filter\"}\n            unmountOnExit\n          > */}\n\n          <Filter />\n          {/* </CSSTransition> */}\n        \n  \n        \n          <ContactList/>\n       \n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state =>{\n  return{\n    items: state.contacts.items\n  }\n}\nexport default connect(mapStateToProps)(App)\n\n\n//*_______________BEFORE_REDUX___________________\n\n// import React, { Component } from \"react\"\n// import ContactList from \"../ContactList\"\n// import PhonebookForm from \"../PhonebookForm\"\n// import Filter from \"../Filter\"\n// import Logo from \"../Logo\"\n// import { CSSTransition } from \"react-transition-group\"\n\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     number: \"\",\n//     showNotification: false\n//   }\n\n//   componentDidMount() {\n//     const persistedContacts = localStorage.getItem(\"contacts\")\n\n//     if (persistedContacts) {\n//       this.setState({\n//         contacts: JSON.parse(persistedContacts),\n//       })\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\n//     }\n//   }\n\n//   onAddContact = (newContact) => {\n//     const sameContact = this.state.contacts.find(\n//       (contact) => contact.name === newContact.name\n//     )\n//     if (sameContact) {\n//       this.setState({ showNotification: true });\n//       setTimeout(() => this.setState({ showNotification: false }), 1500);\n//     } else {\n//       this.setState((prevState) => {\n//         return {\n//           contacts: [...prevState.contacts, newContact],\n//         }\n//       })\n//     }\n//   }\n\n//   onRemoveContact = (contactId) => {\n//     this.setState((prevState) => {\n//       return {\n//         contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n//       }\n//     })\n//   }\n\n//   onChangeFilter = (filter) => {\n//     this.setState({ filter })\n//   }\n\n//   render() {\n//     const filteredContacts = this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter)\n//     )\n//     return (\n//       <>\n//       <CSSTransition in={true} appear = {true} timeout = {500} classNames = \"Logo-slideIn\">\n//         <Logo />\n//         </CSSTransition>\n\n//         <PhonebookForm onAddContact={this.onAddContact}   notification={this.state.showNotification} />\n//         <CSSTransition\n//             in={this.state.contacts.length > 1}\n//             timeout={500}\n//             classNames={\"filter\"}\n//             unmountOnExit\n//           >\n\n//           <Filter\n//             value={this.state.filter}\n//             onChangeFilter={this.onChangeFilter}\n//           />\n//           </CSSTransition>\n        \n  \n        \n//           <ContactList\n//             contacts={filteredContacts}\n//             onRemoveContact={this.onRemoveContact}\n//           />\n       \n//       </>\n//     )\n//   }\n// }\n\n// export default App"]},"metadata":{},"sourceType":"module"}