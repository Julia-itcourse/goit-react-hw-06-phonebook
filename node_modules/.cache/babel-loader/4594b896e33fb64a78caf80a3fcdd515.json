{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport actionTypes from \"./contactsActionTypes\"; //?State\n// {\n//     contacts: {\n//       items: [],\n//       filter: ''\n//     }\n//   }\n\nconst items = (state = [], {\n  type,\n  payload\n}) => {\n  console.log(\"contactsReducer.items\");\n\n  switch (type) {\n    case actionTypes.ADD:\n      console.log(payload.newContact);\n      const sameContact = state.contacts.find(contact => contact.name === newContact.name);\n\n      if (sameContact) {\n        console.log(\"same contact exists\");\n        return state;\n      } else {\n        return [...state, payload.newContact];\n      }\n\n    case actionTypes.REMOVE:\n      return state.filter(contact => contact.id !== payload.contactId);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = \"\", {\n  type,\n  payload\n}) => {\n  console.log(\"contactsReducer.filter\");\n\n  switch (type) {\n    case actionTypes.CHANGE_FILTER:\n      return payload.filter;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter\n});","map":{"version":3,"sources":["D:/dev/GitHub/goit-react-hw-06-phonebook/src/redux/contacts/contactsReducer.js"],"names":["combineReducers","actionTypes","items","state","type","payload","console","log","ADD","newContact","sameContact","contacts","find","contact","name","REMOVE","filter","id","contactId","CHANGE_FILTER"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,uBAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAG,EAAT,EAAa;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAb,KAAmC;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,UAAQH,IAAR;AACE,SAAKH,WAAW,CAACO,GAAjB;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACI,UAApB;AACA,YAAMC,WAAW,GAAGP,KAAK,CAACQ,QAAN,CAAeC,IAAf,CACjBC,OAAD,IAAaA,OAAO,CAACC,IAAR,KAAiBL,UAAU,CAACK,IADvB,CAApB;;AAGA,UAAIJ,WAAJ,EAAiB;AACbJ,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,eAAOJ,KAAP;AACH,OAHD,MAGO;AACL,eAAO,CAAC,GAAGA,KAAJ,EAAWE,OAAO,CAACI,UAAnB,CAAP;AACD;;AAGH,SAAKR,WAAW,CAACc,MAAjB;AACE,aAAOZ,KAAK,CAACa,MAAN,CAAcH,OAAD,IAAaA,OAAO,CAACI,EAAR,KAAeZ,OAAO,CAACa,SAAjD,CAAP;;AAEF;AACE,aAAOf,KAAP;AAlBJ;AAoBD,CAtBD;;AAwBA,MAAMa,MAAM,GAAG,CAACb,KAAK,GAAG,EAAT,EAAa;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAb,KAAmC;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,UAAQH,IAAR;AACE,SAAKH,WAAW,CAACkB,aAAjB;AACE,aAAOd,OAAO,CAACW,MAAf;;AAEF;AACE,aAAOb,KAAP;AALJ;AAOD,CATD;;AAWA,eAAeH,eAAe,CAAC;AAC7BE,EAAAA,KAD6B;AAE7Bc,EAAAA;AAF6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\"\r\nimport actionTypes from \"./contactsActionTypes\"\r\n\r\n//?State\r\n// {\r\n//     contacts: {\r\n//       items: [],\r\n//       filter: ''\r\n//     }\r\n//   }\r\n\r\nconst items = (state = [], { type, payload }) => {\r\n  console.log(\"contactsReducer.items\")\r\n  switch (type) {\r\n    case actionTypes.ADD:\r\n      console.log(payload.newContact)\r\n      const sameContact = state.contacts.find(\r\n        (contact) => contact.name === newContact.name\r\n      )\r\n      if (sameContact) {\r\n          console.log(\"same contact exists\");\r\n          return state\r\n      } else {\r\n        return [...state, payload.newContact]\r\n      }\r\n      \r\n\r\n    case actionTypes.REMOVE:\r\n      return state.filter((contact) => contact.id !== payload.contactId)\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst filter = (state = \"\", { type, payload }) => {\r\n  console.log(\"contactsReducer.filter\")\r\n  switch (type) {\r\n    case actionTypes.CHANGE_FILTER:\r\n      return payload.filter\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n})\r\n"]},"metadata":{},"sourceType":"module"}