{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\dev\\\\GitHub\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React, { Component } from \"react\";\nimport ContactList from \"../ContactList\";\nimport PhonebookForm from \"../PhonebookForm\";\nimport Filter from \"../Filter\";\nimport Logo from \"../Logo\";\nimport { CSSTransition } from \"react-transition-group\";\nimport contactAction from '../../';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: [],\n      filter: \"\",\n      name: \"\",\n      number: \"\",\n      showNotification: false\n    };\n\n    this.onAddContact = newContact => {\n      const sameContact = this.state.contacts.find(contact => contact.name === newContact.name);\n\n      if (sameContact) {\n        this.setState({\n          showNotification: true\n        });\n        setTimeout(() => this.setState({\n          showNotification: false\n        }), 1500);\n      } else {\n        this.setState(prevState => {\n          return {\n            contacts: [...prevState.contacts, newContact]\n          };\n        });\n      }\n    };\n\n    this.onRemoveContact = contactId => {\n      this.setState(prevState => {\n        return {\n          contacts: prevState.contacts.filter(({\n            id\n          }) => id !== contactId)\n        };\n      });\n    };\n\n    this.onChangeFilter = filter => {\n      this.setState({\n        filter\n      });\n    };\n  }\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\");\n\n    if (persistedContacts) {\n      this.setState({\n        contacts: JSON.parse(persistedContacts)\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const filteredContacts = this.state.contacts.filter(contact => contact.name.toLowerCase().includes(this.state.filter));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CSSTransition, {\n        in: true,\n        appear: true,\n        timeout: 500,\n        classNames: \"Logo-slideIn\",\n        children: /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PhonebookForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n        in: this.state.contacts.length > 1,\n        timeout: 500,\n        classNames: \"filter\",\n        unmountOnExit: true,\n        children: /*#__PURE__*/_jsxDEV(Filter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App; //*_______________BEFORE_REDUX___________________\n// import React, { Component } from \"react\"\n// import ContactList from \"../ContactList\"\n// import PhonebookForm from \"../PhonebookForm\"\n// import Filter from \"../Filter\"\n// import Logo from \"../Logo\"\n// import { CSSTransition } from \"react-transition-group\"\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     number: \"\",\n//     showNotification: false\n//   }\n//   componentDidMount() {\n//     const persistedContacts = localStorage.getItem(\"contacts\")\n//     if (persistedContacts) {\n//       this.setState({\n//         contacts: JSON.parse(persistedContacts),\n//       })\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\n//     }\n//   }\n//   onAddContact = (newContact) => {\n//     const sameContact = this.state.contacts.find(\n//       (contact) => contact.name === newContact.name\n//     )\n//     if (sameContact) {\n//       this.setState({ showNotification: true });\n//       setTimeout(() => this.setState({ showNotification: false }), 1500);\n//     } else {\n//       this.setState((prevState) => {\n//         return {\n//           contacts: [...prevState.contacts, newContact],\n//         }\n//       })\n//     }\n//   }\n//   onRemoveContact = (contactId) => {\n//     this.setState((prevState) => {\n//       return {\n//         contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n//       }\n//     })\n//   }\n//   onChangeFilter = (filter) => {\n//     this.setState({ filter })\n//   }\n//   render() {\n//     const filteredContacts = this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter)\n//     )\n//     return (\n//       <>\n//       <CSSTransition in={true} appear = {true} timeout = {500} classNames = \"Logo-slideIn\">\n//         <Logo />\n//         </CSSTransition>\n//         <PhonebookForm onAddContact={this.onAddContact}   notification={this.state.showNotification} />\n//         <CSSTransition\n//             in={this.state.contacts.length > 1}\n//             timeout={500}\n//             classNames={\"filter\"}\n//             unmountOnExit\n//           >\n//           <Filter\n//             value={this.state.filter}\n//             onChangeFilter={this.onChangeFilter}\n//           />\n//           </CSSTransition>\n//           <ContactList\n//             contacts={filteredContacts}\n//             onRemoveContact={this.onRemoveContact}\n//           />\n//       </>\n//     )\n//   }\n// }\n// export default App","map":{"version":3,"sources":["D:/dev/GitHub/goit-react-hw-06-phonebook/src/components/App/App.jsx"],"names":["React","Component","ContactList","PhonebookForm","Filter","Logo","CSSTransition","contactAction","App","state","contacts","filter","name","number","showNotification","onAddContact","newContact","sameContact","find","contact","setState","setTimeout","prevState","onRemoveContact","contactId","id","onChangeFilter","componentDidMount","persistedContacts","localStorage","getItem","JSON","parse","componentDidUpdate","prevProps","setItem","stringify","render","filteredContacts","toLowerCase","includes","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport ContactList from \"../ContactList\"\nimport PhonebookForm from \"../PhonebookForm\"\nimport Filter from \"../Filter\"\nimport Logo from \"../Logo\"\nimport { CSSTransition } from \"react-transition-group\"\nimport contactAction from '../../'\n\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n    showNotification: false\n  }\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\")\n\n    if (persistedContacts) {\n      this.setState({\n        contacts: JSON.parse(persistedContacts),\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\n    }\n  }\n\n  onAddContact = (newContact) => {\n    const sameContact = this.state.contacts.find(\n      (contact) => contact.name === newContact.name\n    )\n    if (sameContact) {\n      this.setState({ showNotification: true });\n      setTimeout(() => this.setState({ showNotification: false }), 1500);\n    } else {\n      this.setState((prevState) => {\n        return {\n          contacts: [...prevState.contacts, newContact],\n        }\n      })\n    }\n  }\n\n  onRemoveContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      }\n    })\n  }\n\n  onChangeFilter = (filter) => {\n    this.setState({ filter })\n  }\n\n  render() {\n    const filteredContacts = this.state.contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(this.state.filter)\n    )\n    return (\n      <>\n      <CSSTransition in={true} appear = {true} timeout = {500} classNames = \"Logo-slideIn\">\n        <Logo />\n        </CSSTransition>\n\n        <PhonebookForm />\n        <CSSTransition\n            in={this.state.contacts.length > 1}\n            timeout={500}\n            classNames={\"filter\"}\n            unmountOnExit\n          >\n\n          <Filter />\n          </CSSTransition>\n        \n  \n        \n          <ContactList/>\n       \n      </>\n    )\n  }\n}\n\nexport default App\n\n\n\n//*_______________BEFORE_REDUX___________________\n\n// import React, { Component } from \"react\"\n// import ContactList from \"../ContactList\"\n// import PhonebookForm from \"../PhonebookForm\"\n// import Filter from \"../Filter\"\n// import Logo from \"../Logo\"\n// import { CSSTransition } from \"react-transition-group\"\n\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     number: \"\",\n//     showNotification: false\n//   }\n\n//   componentDidMount() {\n//     const persistedContacts = localStorage.getItem(\"contacts\")\n\n//     if (persistedContacts) {\n//       this.setState({\n//         contacts: JSON.parse(persistedContacts),\n//       })\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\n//     }\n//   }\n\n//   onAddContact = (newContact) => {\n//     const sameContact = this.state.contacts.find(\n//       (contact) => contact.name === newContact.name\n//     )\n//     if (sameContact) {\n//       this.setState({ showNotification: true });\n//       setTimeout(() => this.setState({ showNotification: false }), 1500);\n//     } else {\n//       this.setState((prevState) => {\n//         return {\n//           contacts: [...prevState.contacts, newContact],\n//         }\n//       })\n//     }\n//   }\n\n//   onRemoveContact = (contactId) => {\n//     this.setState((prevState) => {\n//       return {\n//         contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n//       }\n//     })\n//   }\n\n//   onChangeFilter = (filter) => {\n//     this.setState({ filter })\n//   }\n\n//   render() {\n//     const filteredContacts = this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter)\n//     )\n//     return (\n//       <>\n//       <CSSTransition in={true} appear = {true} timeout = {500} classNames = \"Logo-slideIn\">\n//         <Logo />\n//         </CSSTransition>\n\n//         <PhonebookForm onAddContact={this.onAddContact}   notification={this.state.showNotification} />\n//         <CSSTransition\n//             in={this.state.contacts.length > 1}\n//             timeout={500}\n//             classNames={\"filter\"}\n//             unmountOnExit\n//           >\n\n//           <Filter\n//             value={this.state.filter}\n//             onChangeFilter={this.onChangeFilter}\n//           />\n//           </CSSTransition>\n        \n  \n        \n//           <ContactList\n//             contacts={filteredContacts}\n//             onRemoveContact={this.onRemoveContact}\n//           />\n       \n//       </>\n//     )\n//   }\n// }\n\n// export default App"]},"metadata":{},"sourceType":"module"}