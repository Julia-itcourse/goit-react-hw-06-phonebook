{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\dev\\\\GitHub\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\ContactList\\\\ContactList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport ContactItem from \"../ContactItem\";\nimport PropTypes, { arrayOf } from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport \"./ContactList.css\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\n\nconst ContactList = () => {\n  _s();\n\n  useEffect(() => {\n    onSaveContact();\n  }, []);\n};\n\n_s(ContactList, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ContactList;\n\nclass OldContactList extends Component {\n  componentDidMount() {\n    this.props.onSaveContact();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    return this.props.contacts ? localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts)) : [];\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(TransitionGroup, {\n      component: \"ul\",\n      className: \"ContactList\",\n      children: this.props.contacts.map(item => /*#__PURE__*/_jsxDEV(CSSTransition, {\n        timeout: 250,\n        classNames: \"ContactList-item-slide\",\n        children: /*#__PURE__*/_jsxDEV(ContactItem, {\n          contact: item,\n          onRemoveContact: () => this.props.onRemoveContact(item.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    items,\n    filter\n  } = state.contacts;\n  const filteredContacts = items.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  return {\n    contacts: filteredContacts\n  };\n};\n\nconst mapDispatchToProps = {\n  onRemoveContact: contactsActions.onRemoveContact,\n  onSaveContact: contactsActions.onSaveContact\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["D:/dev/GitHub/goit-react-hw-06-phonebook/src/components/ContactList/ContactList.jsx"],"names":["React","Component","useState","useEffect","ContactItem","PropTypes","arrayOf","CSSTransition","TransitionGroup","connect","contactsActions","ContactList","onSaveContact","OldContactList","componentDidMount","props","componentDidUpdate","prevProps","prevState","contacts","localStorage","setItem","JSON","stringify","render","map","item","onRemoveContact","id","mapStateToProps","state","items","filter","filteredContacts","contact","name","toLowerCase","includes","mapDispatchToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,IAAoBC,OAApB,QAAmC,YAAnC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;AACA,OAAO,mBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxBR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAGD,CAJD;;GAAMD,W;;KAAAA,W;;AAKN,MAAME,cAAN,SAA6BZ,SAA7B,CAAuC;AACrCa,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWH,aAAX;AACD;;AAEDI,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,WAAO,KAAKH,KAAL,CAAWI,QAAX,GACHC,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAe,KAAKR,KAAL,CAAWI,QAA1B,CAAjC,CADG,GAEH,EAFJ;AAGD;;AAEDK,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,IAA3B;AAAgC,MAAA,SAAS,EAAC,aAA1C;AAAA,gBACG,KAAKT,KAAL,CAAWI,QAAX,CAAoBM,GAApB,CAAyBC,IAAD,iBACvB,QAAC,aAAD;AAEE,QAAA,OAAO,EAAE,GAFX;AAGE,QAAA,UAAU,EAAC,wBAHb;AAAA,+BAKE,QAAC,WAAD;AACE,UAAA,OAAO,EAAEA,IADX;AAEE,UAAA,eAAe,EAAE,MAAM,KAAKX,KAAL,CAAWY,eAAX,CAA2BD,IAAI,CAACE,EAAhC;AAFzB;AAAA;AAAA;AAAA;AAAA;AALF,SACOF,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA5BoC;;AA8BvC,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBF,KAAK,CAACX,QAAhC;AACA,QAAMc,gBAAgB,GAAGF,KAAK,CAACC,MAAN,CAAcE,OAAD,IACpCA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCL,MAAM,CAACI,WAAP,EAApC,CADuB,CAAzB;AAIA,SAAO;AAAEjB,IAAAA,QAAQ,EAAEc;AAAZ,GAAP;AACD,CAPD;;AASA,MAAMK,kBAAkB,GAAG;AACzBX,EAAAA,eAAe,EAAEjB,eAAe,CAACiB,eADR;AAEzBf,EAAAA,aAAa,EAAEF,eAAe,CAACE;AAFN,CAA3B;AAIA,eAAeH,OAAO,CAACoB,eAAD,EAAkBS,kBAAlB,CAAP,CAA6C3B,WAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ContactItem from \"../ContactItem\";\r\nimport PropTypes, { arrayOf } from \"prop-types\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"./ContactList.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\n\r\nconst ContactList = () => {\r\n  useEffect(() => {\r\n    onSaveContact();\r\n  }, []);\r\n};\r\nclass OldContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.onSaveContact();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    return this.props.contacts\r\n      ? localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts))\r\n      : [];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TransitionGroup component=\"ul\" className=\"ContactList\">\r\n        {this.props.contacts.map((item) => (\r\n          <CSSTransition\r\n            key={item.id}\r\n            timeout={250}\r\n            classNames=\"ContactList-item-slide\"\r\n          >\r\n            <ContactItem\r\n              contact={item}\r\n              onRemoveContact={() => this.props.onRemoveContact(item.id)}\r\n            />\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  const { items, filter } = state.contacts;\r\n  const filteredContacts = items.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n\r\n  return { contacts: filteredContacts };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemoveContact: contactsActions.onRemoveContact,\r\n  onSaveContact: contactsActions.onSaveContact,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n"]},"metadata":{},"sourceType":"module"}