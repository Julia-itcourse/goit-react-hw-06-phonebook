{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsActions from './contactsActions';\n\nconst handleAdd = (state, action) => {\n  return [...state, action.payload.newContact];\n};\n\nconst handleRemove = (state, action) => {\n  return state.filter(contact => contact.id !== action.payload);\n};\n\nconst items = createReducer([], {\n  [contactsActions.onAddContact]: handleAdd,\n  [contactsActions.onRemoveContact]: handleRemove\n});\nconst filter = createReducer('', {\n  [contactsActions.onChangeFilter]: (state, action) => action.payload\n});\nexport default combineReducers({\n  items,\n  filter\n}); //*______________________BEFORE CREATE REDUCER__________________\n// import { combineReducers } from \"redux\"\n// import contactsActions from './contactsActions'\n// const items = (state = [], { type, payload }) => {\n//   console.log(\"contactsReducer.items\")\n//   switch (type) {\n//     case contactsActions.onAddContact.type:\n//       console.log(payload.newContact)\n//       return [...state, payload.newContact]\n//     case contactsActions.onRemoveContact.type:\n//       return state.filter((contact) => contact.id !== payload)\n//     default:\n//       return state\n//   }\n// }\n// const filter = (state = \"\", { type, payload }) => {\n//   console.log(\"contactsReducer.filter\")\n//   switch (type) {\n//     case contactsActions.onChangeFilter.type:\n//       return payload\n//     default:\n//       return state\n//   }\n// }\n// export default combineReducers({\n//   items,\n//   filter,\n// })\n// *______________________BEFORE TOOLKIT__________________________\n// import { combineReducers } from \"redux\"\n// import actionTypes from \"./contactsActionTypes\"\n// const items = (state = [], { type, payload }) => {\n//   console.log(\"contactsReducer.items\")\n//   switch (type) {\n//     case actionTypes.ADD:\n//       console.log(payload.newContact)\n//       return [...state, payload.newContact]\n//     case actionTypes.REMOVE:\n//       return state.filter((contact) => contact.id !== payload.contactId)\n//     default:\n//       return state\n//   }\n// }\n// const filter = (state = \"\", { type, payload }) => {\n//   console.log(\"contactsReducer.filter\")\n//   switch (type) {\n//     case actionTypes.CHANGE_FILTER:\n//       return payload.filter\n//     default:\n//       return state\n//   }\n// }\n// export default combineReducers({\n//   items,\n//   filter,\n// })","map":{"version":3,"sources":["D:/dev/GitHub/goit-react-hw-06-phonebook/src/redux/contacts/contactsReducer.js"],"names":["combineReducers","createReducer","contactsActions","handleAdd","state","action","payload","newContact","handleRemove","filter","contact","id","items","onAddContact","onRemoveContact","onChangeFilter"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAChC,SAAO,CAAC,GAAGD,KAAJ,EAAWC,MAAM,CAACC,OAAP,CAAeC,UAA1B,CAAP;AACH,CAFD;;AAIA,MAAMC,YAAY,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAkB;AACnC,SAAOD,KAAK,CAACK,MAAN,CAAcC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACC,OAAhD,CAAP;AACH,CAFD;;AAIA,MAAMM,KAAK,GAAGX,aAAa,CAAC,EAAD,EAAK;AAC5B,GAACC,eAAe,CAACW,YAAjB,GAAgCV,SADJ;AAE5B,GAACD,eAAe,CAACY,eAAjB,GAAmCN;AAFP,CAAL,CAA3B;AAKA,MAAMC,MAAM,GAAGR,aAAa,CAAC,EAAD,EAAK;AAC7B,GAACC,eAAe,CAACa,cAAjB,GAAkC,CAACX,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AAD/B,CAAL,CAA5B;AAKA,eAAeN,eAAe,CAAC;AAC7BY,EAAAA,KAD6B;AAE7BH,EAAAA;AAF6B,CAAD,CAA9B,C,CAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from \"redux\"\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport contactsActions from './contactsActions'\r\n\r\nconst handleAdd = (state, action) =>{\r\n    return [...state, action.payload.newContact]\r\n}\r\n\r\nconst handleRemove = (state, action) =>{\r\n    return state.filter((contact) => contact.id !== action.payload)\r\n}\r\n\r\nconst items = createReducer([], {\r\n    [contactsActions.onAddContact]: handleAdd,\r\n    [contactsActions.onRemoveContact]: handleRemove,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [contactsActions.onChangeFilter]: (state, action) => action.payload\r\n})\r\n\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n})\r\n\r\n//*______________________BEFORE CREATE REDUCER__________________\r\n// import { combineReducers } from \"redux\"\r\n// import contactsActions from './contactsActions'\r\n\r\n\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   console.log(\"contactsReducer.items\")\r\n//   switch (type) {\r\n//     case contactsActions.onAddContact.type:\r\n//       console.log(payload.newContact)\r\n//       return [...state, payload.newContact]\r\n\r\n//     case contactsActions.onRemoveContact.type:\r\n//       return state.filter((contact) => contact.id !== payload)\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   console.log(\"contactsReducer.filter\")\r\n//   switch (type) {\r\n//     case contactsActions.onChangeFilter.type:\r\n//       return payload\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// })\r\n\r\n// *______________________BEFORE TOOLKIT__________________________\r\n\r\n// import { combineReducers } from \"redux\"\r\n// import actionTypes from \"./contactsActionTypes\"\r\n\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   console.log(\"contactsReducer.items\")\r\n//   switch (type) {\r\n//     case actionTypes.ADD:\r\n//       console.log(payload.newContact)\r\n//       return [...state, payload.newContact]\r\n\r\n//     case actionTypes.REMOVE:\r\n//       return state.filter((contact) => contact.id !== payload.contactId)\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   console.log(\"contactsReducer.filter\")\r\n//   switch (type) {\r\n//     case actionTypes.CHANGE_FILTER:\r\n//       return payload.filter\r\n\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// })\r\n"]},"metadata":{},"sourceType":"module"}